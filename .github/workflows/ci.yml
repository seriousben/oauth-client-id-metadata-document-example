name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust: [stable, 1.89.0]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: ${{ matrix.rust }}
        components: rustfmt, clippy

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2

    - name: Check formatting
      run: cargo fmt --all -- --check

    - name: Run clippy
      run: cargo clippy --workspace --all-targets --all-features -- -D warnings

    - name: Run unit tests
      run: cargo test --workspace --all-features

    - name: Build release
      run: cargo build --release --workspace

  docker-test:
    name: Docker Integration Test
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        load: true
        tags: oauth-test:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Start Docker container
      run: |
        docker run -d --name oauth-server -p 3002:3000 \
          -e PUBLIC_URL=http://localhost:3002 \
          -e RUST_LOG=info \
          oauth-test:latest
        
        # Wait for container to start
        sleep 5
        
        # Check if container is running
        docker ps | grep oauth-server

    - name: Run release tests
      run: |
        chmod +x scripts/release-test.sh
        ./scripts/release-test.sh http://localhost:3002

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2

    - name: Install cargo-audit
      run: cargo install cargo-audit

    - name: Run security audit
      run: cargo audit

  publish-test:
    name: Publish Test (Dry Run)
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: [test, docker-test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Cache dependencies  
      uses: Swatinem/rust-cache@v2

    - name: Dry run publish
      run: cargo publish --dry-run --manifest-path crates/oauth-metadata/Cargo.toml